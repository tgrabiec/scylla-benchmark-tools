; -*- mode: clojure; -*-
; vim: filetype=clojure

(logging/init {:file "riemann.log"})

; Listen on the local interface over TCP (5555), UDP (5555), and websockets
; (5556)
(let [host "127.0.0.1"]
  (tcp-server {:host host})
  (udp-server {:host host})
  (ws-server  {:host host}))

;(let [host "127.0.0.1"]
;  (tcp-server {:host host}))

(periodically-expire 15)

(def graph (graphite {:host "localhost"}))

(let [index (index)]
  (streams
    (where (not (service #"smp.*"))

    (by [:host]
    (where (service #"transport.*current")
        (coalesce (smap folds/sum
        (with {:service "transport/total_current"} index graph)))
    )

    (where (service #"transport.*requests_served")
        (coalesce (smap folds/sum
        (with {:service "transport/total_requests_served"} index graph)))
    )

    (where (service #"cache-.*total_operations-misses")
        (coalesce (smap folds/sum
        (with {:service "cache/misses"} index graph)))
    )

    (where (service #"cache-.*total_operations-insertions")
        (coalesce (smap folds/sum
        (with {:service "cache/insertions"} index graph)))
    )

    (where (service #"cache-.*total_operations-hits")
        (coalesce (smap folds/sum
        (with {:service "cache/hits"} index graph)))
    )

    (where (service #"cache-.*total_operations-merges")
        (coalesce (smap folds/sum
        (with {:service "cache/merges"} index graph)))
    )

    (where (service #"cache-.*bytes-used")
        (coalesce (smap folds/sum
        (with {:service "cache/bytes-used"} index graph)))
    )

    (where (service #"cache-.*bytes-total")
        (coalesce (smap folds/sum
        (with {:service "cache/bytes-total"} index graph)))
    )

    (where (service #"cache-.*objects-partitions")
        (coalesce (smap folds/sum
        (with {:service "cache/partitions"} index graph)))
    )

    (where (service #"lsa-.*bytes-used_space")
        (coalesce (smap folds/sum
        (with {:service "lsa/bytes-used_space"} index graph)))
    )

    (where (service #"lsa-.*bytes-non_lsa_used_space")
        (coalesce (smap folds/sum
        (with {:service "lsa/bytes-non_lsa_used_space"} index graph)))
    )

    (where (service #"lsa-.*bytes-total_space")
        (coalesce (smap folds/sum
        (with {:service "lsa/bytes-total_space"} index graph)))
    )

    (where (service #"commitlog-.*total_bytes-written")
        (coalesce (smap folds/sum
        (with {:service "commitlog/total_bytes-written"} index graph)))
    )

    (where (service #"sstable-.*total_operations-index_reads")
        (coalesce (smap folds/sum
        (with {:service "sstable/total_operations-index_reads"} index graph)))
    )

    (where (service #"sstable-.*total_operations-index_cache_hits")
        (coalesce (smap folds/sum
        (with {:service "sstable/total_operations-index_cache_hits"} index graph)))
    )

    (where (service #"sstable-.*total_operations-index_cache_misses")
        (coalesce (smap folds/sum
        (with {:service "sstable/total_operations-index_cache_misses"} index graph)))
    )

    (where (service #"reactor-.*gauge-load")
        (coalesce (smap folds/mean
        (with {:service "reactor/gauge-load"} index graph)))
    )
    )

    (where (service #"transport.*requests_served")
        (coalesce (smap folds/sum
        (with {:service "transport/total_requests_served" :host nil} index graph)))
    )

    (where (service #"cassandra.*total_operations-reads")
        (coalesce (smap folds/sum
        (with {:service "cassandra/total_operations-reads" :host nil} index graph)))
    )

    (where (service #"cassandra.*total_operations-all")
        (coalesce (smap folds/sum
        (with {:service "cassandra/total_operations-all" :host nil} index graph)))
    )

    (where (service #"cassandra.*total_operations-writes")
        (coalesce (smap folds/sum
        (with {:service "cassandra/total_operations-writes" :host nil} index graph)))
    )

    index graph)
    )
)
